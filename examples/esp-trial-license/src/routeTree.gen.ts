/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ValidateImport } from './routes/validate'
import { Route as LicensedImport } from './routes/_licensed'
import { Route as IndexImport } from './routes/index'
import { Route as LicensedEspImport } from './routes/_licensed.esp'

// Create/Update Routes

const ValidateRoute = ValidateImport.update({
  path: '/validate',
  getParentRoute: () => rootRoute,
} as any)

const LicensedRoute = LicensedImport.update({
  id: '/_licensed',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const LicensedEspRoute = LicensedEspImport.update({
  path: '/esp',
  getParentRoute: () => LicensedRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_licensed': {
      id: '/_licensed'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LicensedImport
      parentRoute: typeof rootRoute
    }
    '/validate': {
      id: '/validate'
      path: '/validate'
      fullPath: '/validate'
      preLoaderRoute: typeof ValidateImport
      parentRoute: typeof rootRoute
    }
    '/_licensed/esp': {
      id: '/_licensed/esp'
      path: '/esp'
      fullPath: '/esp'
      preLoaderRoute: typeof LicensedEspImport
      parentRoute: typeof LicensedImport
    }
  }
}

// Create and export the route tree

interface LicensedRouteChildren {
  LicensedEspRoute: typeof LicensedEspRoute
}

const LicensedRouteChildren: LicensedRouteChildren = {
  LicensedEspRoute: LicensedEspRoute,
}

const LicensedRouteWithChildren = LicensedRoute._addFileChildren(
  LicensedRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof LicensedRouteWithChildren
  '/validate': typeof ValidateRoute
  '/esp': typeof LicensedEspRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof LicensedRouteWithChildren
  '/validate': typeof ValidateRoute
  '/esp': typeof LicensedEspRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_licensed': typeof LicensedRouteWithChildren
  '/validate': typeof ValidateRoute
  '/_licensed/esp': typeof LicensedEspRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '' | '/validate' | '/esp'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '' | '/validate' | '/esp'
  id: '__root__' | '/' | '/_licensed' | '/validate' | '/_licensed/esp'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LicensedRoute: typeof LicensedRouteWithChildren
  ValidateRoute: typeof ValidateRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LicensedRoute: LicensedRouteWithChildren,
  ValidateRoute: ValidateRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_licensed",
        "/validate"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_licensed": {
      "filePath": "_licensed.tsx",
      "children": [
        "/_licensed/esp"
      ]
    },
    "/validate": {
      "filePath": "validate.tsx"
    },
    "/_licensed/esp": {
      "filePath": "_licensed.esp.tsx",
      "parent": "/_licensed"
    }
  }
}
ROUTE_MANIFEST_END */
